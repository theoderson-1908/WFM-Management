1) Employee table

CREATE TABLE Employee (
    EmpId  int NOT NULL PRIMARY KEY,
	EmpName varchar(50) NOT NULL,
	Status varchar(50) NOT NULL,
	ManagerName varchar (30),
	wfm_MemberName varchar (30),
	Email varchar(250) NOT NULL ,
	LockStatus  varchar(50),
	Experience  decimal (5,0),
	Profile varchar(255),
	LockId int NOT NULL FOREIGN KEY REFERENCES SoftLock(LockId)
);


2) Skill table

CREATE TABLE Skill(
	SkillId int NOT NULL PRIMARY KEY , 
	SkillName  varchar(30) NOT NULL
);


3) SkillMap 

CREATE TABLE SkillMap(
	EmpId int FOREIGN KEY REFERENCES Employee(EmpId)  , 
	SkillId  int FOREIGN KEY REFERENCES Skill(SkillId)
);


4) User

CREATE TABLE User(
	UserName varchar(50) NOT NULL PRIMARY KEY,
	Password varchar(50) NOT NULL,
	FirstName varchar(30) NOT NULL , 
	Role  varchar(30) NOT NULL,
	Email  varchar(50)
)


5) SoftLock

CREATE TABLE SoftLock(
	LockId int NOT NULL PRIMARY KEY,
	EmpId  int NULL,
	RequestedManager  varchar(50) NULL,
	RequestedDate  DATETIME,
	LockStatus  varchar(50) NOT NULL,	
	IsLocked Bit NULL,
	LastUpdatedDate DATETIME,
	RequestMessage   varchar(255) NOT NULL,
	WfmRemark  varchar(255) NOT NULL,
	ManagerStatus  varchar(50) NOT NULL,
	ManagerComment  varchar(255) NOT NULL,
	ManagerLastUpdatedDate  DATETIME
)




Stored Procedures :


1) sp_GetUserForLogin

//  While login need to check whether the user and password are in the User table.

CREATE PROCEDURE sp_GetUserForLogin
(
	@UserName  varchar(255),
	@Password  varchar(255)
)
AS
BEGIN
	SELECT 
	UserName,
	Password,
	FirstName,
	Role
	Email FROM [User]
	WHERE
	UserName = @UserName AND Password = @Password 
END




2) sp_GetDetailsForManagerPage

// After login as manager , get data for that table.

CREATE PROCEDURE sp_GetDetailsForManagerPage
(
	
)
AS
BEGIN
	SELECT 
		emp.EmpId,
		emp.EmpName,
		sk.SkillName,
		emp.Profile,
		emp.Experience,
		emp.ManagerName,
		sftlck.IsLocked
	FROM Employee emp
	 JOIN SkillMap skm ON skm.EmpId  = emp.EmpId 
	 JOIN Skill sk ON skm.SkillId = sk.SkillId 
	 JOIN SoftLock sftlck ON sftlck.LockId = emp.LockId
	where sftlck.IsLocked = 1
END




3) sp_LockStatusChangeForManager

// After clicking the send request button by the manager.


CREATE PROCEDURE sp_LockStatusChangeForManager
(
	@LockId int,
	@RequestMessage varchar(255)
	@FirstName varchar(50)
)
AS
BEGIN
	UPDATE SoftLock
	SET
		RequestedDate = GETDATE(),
		LockStatus = 'Pending',
		RequestMessage = @RequestMessage,
		LastUpdatedDate = GETDATE(),
		RequestedManager = @FirstName
	WHERE
	LockId = @LockId 
END



4) sp_wfmMemberLoginGetDetails

// WFM_Member opening screen

CREATE PROCEDURE sp_wfmMemberLoginGetDetails
(
	@UserName varchar(255),
)
AS
BEGIN
	SELECT
		emp.EmpId,
		sftlck.RequestedManager,
		sftlck.RequestedDate,
		emp.ManagerName,
		sftlck.RequestMessage
	FROM
	Employee emp
	JOIN SoftLock sftlck ON SoftLock.LockId  = Employee.LockId
	WHERE emp.wfm_MemberName = @UserName	
END




5) sp_ApprovalStatusForSendRequestByWfmMember

// Status updation by wfmMember

CREATE PROCEDURE sp_ApprovalStatusForSendRequestByWfmMember
(
	@EmpId int ,
	@ManagerStatus  varchar(255),
	@ManagerComment varchar(255)
)
AS
BEGIN
	DECLARE @LockId int
	Select @LockId = LockId FROM Employee where EmpId = @EmpId
	UPDATE SoftLock
	SET
		IsLocked = CASE WHEN @ManagerStatus = 'Unlock' THEN 0 Else 1 END,
		LockStatus = @ManagerStatus,
		LastUpdatedDate = GETDATE() ,
		ManagerLastUpdatedDate = GETDATE(),
		ManagerComment = @ManagerComment
	WHERE
	LockId = @LockId 
END





INSERT INTO [User] (UserName, [Password], FirstName , [Role] , Email)
VALUES
('TestManager' , '1234' , 'Jack' , 'Manager' , 'TestManager@gmail.com')


INSERT INTO Skill (SkillId , SkillName)
VALUES
(1,'Java')

INSERT INTO Skill (SkillId , SkillName)
VALUES
(2,'Python')

INSERT INTO Skill (SkillId , SkillName)
VALUES
(3,'JavaScript')



INSERT INTO SoftLock (LockId , EmpId , LockStatus , IsLocked , LastUpdatedDate , RequestMessage, WfmRemark , ManagerStatus , ManagerComment)
Values
(1 , 1 , 'Locked' , 1 , GETDATE() , 'WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far' )

INSERT INTO SoftLock (LockId , EmpId , LockStatus , IsLocked , LastUpdatedDate , RequestMessage, WfmRemark , ManagerStatus , ManagerComment)
Values
(2 , 2 , 'Locked' , 1 , GETDATE() , 'WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far' )

INSERT INTO SoftLock (LockId , EmpId , LockStatus , IsLocked , LastUpdatedDate , RequestMessage, WfmRemark , ManagerStatus , ManagerComment)
Values
(3 , 3 , 'Locked' , 1 , GETDATE() , 'WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far','WfmMember did nothing so far' )

INSERT INTO Employee (EmpId , EmpName , [Status] , ManagerName , wfm_MemberName , Email , LockStatus , Experience , [Profile] , LockId )
VALUES
(1, 'Theoder' , 'Senior Engineer' , 'Prasan' , 'Jim' , 'theo@gmail.com' , 1 , '4' , 'Java Developer' , 1)

INSERT INTO Employee (EmpId , EmpName , [Status] , ManagerName , wfm_MemberName , Email , LockStatus , Experience , [Profile] , LockId )
VALUES
(2, 'Ebe' , 'Senior Engineer' , 'Prasan' , 'Jim' , 'Ebe@gmail.com' , 1 , '3' , 'Python Developer' , 2)

INSERT INTO Employee (EmpId , EmpName , [Status] , ManagerName , wfm_MemberName , Email , LockStatus , Experience , [Profile] , LockId )
VALUES
(3, 'Devavaram' , 'Senior Engineer' , 'Prasan' , 'Jim' , 'Deva@gmail.com' , 1 , '5' , 'Java Developer' , 3)


INSERT INTO SkillMap (EmpId , SkillId)
VALUES
(1,1)

INSERT INTO SkillMap (EmpId , SkillId)
VALUES
(2,2)

INSERT INTO SkillMap (EmpId , SkillId)
VALUES
(3,3)